import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams } from 'ionic-angular';
import { CommonProvider } from "../../providers/common/common";

/**
 * Generated class for the FirmOrderPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage({
  name: 'firm-order'
})
@Component({
  selector: 'page-firm-order',
  templateUrl: 'firm-order.html',
})
export class FirmOrderPage {
  flow_type = 0;
  bs_id = 0;
  team_id = 0;
  t_id = "0";
  flowData = {};
  userInfo = {};
  cartGoods:any = {};
  goodsList = [];
  addressId = null;//收货地址id
  shippingId = 0;//快递id
  ru_id = 0;//商家id

  /*10.9*/
  is_first_action: boolean = !0;
  toppings: any = 1;
  _: any = {
    consignee: 1,
    shipping_id: [],
    msg: ""
  };
  a: any;
  resShipingId: any = [];
  shopLists: any = [];
  shippingName: any;
  shpppingId: any;
  cartId = '';//购物车选中id字符串

  constructor(
    public navCtrl: NavController,
    public cp: CommonProvider,
    public navParams: NavParams) {
      this.cartId = this.navParams.get('cartId') || '';
      this.flow_type = this.navParams.get('flow_type') || 0;
      this.bs_id = this.navParams.get('objectId') || 0;
      this.team_id = this.navParams.get('team_id') || 0;
      this.t_id = this.navParams.get('t_id') || "0";
  }
  ionViewWillEnter() {
    this.flow();
  }

  // 修改配送方式
  changeShip(r, i) { //r: 商铺id  i: 快递id
    this.shippingId = i;
    this.ru_id = r;
    this.shipping();
  }
  flow() {
    this.cp.getData('flow', {
      cartId: this.cartId,
      flow_type: this.flow_type,
      bs_id: this.bs_id,
      team_id: this.team_id,
      t_id: this.t_id,
      silent: true
    }).then(
      (t: any) => {
        this.flowData = t.data;
        this.userInfo = t.data.default_address;
        this.addressId = t.data.default_address.address_id;
        this.shopLists = this.cartGoods = t.data.cart_goods_list;
        this.goodsList = t.data.cart_goods_list.list;
        if(!this.goodsList.length)
          this.cp.pop();
        // this.ru_id = t.data.cart_goods_list.list[0].shop_info[0].ru_id;//默认商家id

        let listObj = t.data.cart_goods_list.list;
        if (listObj != '' && this.addressId) {
          for (const key in listObj) {
            if (listObj[key].shop_info[0]) {
              this.changeShip(listObj[key].shop_info[0].ru_id, listObj[key].shop_info[0].shipping_id)
            }
          }
        }
        this.checkOrder();

        let { _, a } = this;
        _.consignee = t.data.default_address.address_id
        a = t.data.cart_goods_list.list;
        this.getShopName();
      }
    )
  }
  shipping() {
    this.cp.getData('flow/shipping', {
      address: this.addressId,
      id: this.shippingId,
      ru_id: this.ru_id,
      flow_type: this.flow_type,
      uc_id: 0,
      silent: true
    }).then(
      (t: any) => {
        /*let _: any = {};

         let {address: _.consignee,
           id: this.data.resShipingId[i].shipping_id,
           ru_id: this.data.resShipingId[i].ru_id,
           flow_type: r || "0",
           uc_id: t.data.cou_id ? t.data.cou_id : 0} = t;
         */
      }
    )
  }

  checkOrder() {
    if (!this.userInfo) {//这里判断有没有地址
      if(this.cp.temp.pop)
        this.cp.temp.pop = 0, this.cp.pop();
      else
        this.cp.temp.pop = 1,this.goToAddr();
    }
  }

  chooseAddr(addr) {
    //这里赋值地址
    this.userInfo = addr;
  }
  goToAddr() {
    this.cp.goto({
      view: 'address',
      callBack: this.chooseAddr.bind(this)
    });
  }

  /*10.9继续购买订单方法*/
  getShopName() {
    var t = this, i = [], e = [], _ = this._;
    for (var n in this.shopLists.list) (function (a) {
      var n = [], s = [], d = {
        option: [],
        id: 0
      }, o = t.shopLists.list[a];
      "" != o.shop_info && (o.shop_info.forEach(function (a) {
        n.push(a.shipping_name), s.push(a.shipping_id);
      }), d.option = n, i.push(d), e.push(s), _.shipping_id = s[0], t.resShipingId.push({
        ru_id: o.shop_info[0].ru_id,
        shipping_id: o.shop_info[0].shipping_id
      }));
    }(n));
    this.shippingName = i;
    this.shpppingId = e
  }
  submitOrder() {
    let o, { flow_type, bs_id, team_id, t_id, _ } = this;
    if (this.is_first_action) {
      this.is_first_action = !1;

      if ("" == _.consignee || void 0 == _.consignee) {
        this.cp.toast("请填写收货地址");
        return;
      }
      o = {
        inv_payee: "",
        inv_content: ""
      };
      let params = {
        consignee: _.consignee,//收货地址id
        shipping: this.resShipingId,//快递方式
        postdata: o,//发票信息
        uc_id: "0",//优惠券
        bs_id,
        flow_type,
        team_id,
        t_id,
        cartId: this.cartId,
        referer: this.cp.plt.is('cordova') ? 'app' : 'h5',
        pay_name: ['余额支付', '微信支付', '支付宝'][this.toppings],
        pay_id: [11, 18, 9][this.toppings],
      };
      if(this.toppings == 0 && + this.cartGoods.order_total > + this.cp.u.user_money)
        return this.cp.toast('余额不足');

      this.cp.getData('flow/down', params).then((res: any) => {
        if (res.code == 1) {
          this.cp.toast(res.data)
        } else {
          this.goToPay(res.data.order_id, res.data.log_id)
        }
      })
    }
  }
  goToPay(id, log_id) {
    let type = this.toppings;
    let params = {
      code: 'order.pay',
      id,
      type,
      log_id
    };

    this.cp.pay(params, () => {
      this.cp.getData("flow/detail", { id }).then((res: any) => {
        if (res.code == 0) {
          if(res.data.team_id)
            this.cp.goto({ view: 'collage-progress', team_id: res.data.team_id });
          else
            this.cp.goto({ view: 'order-detail', objectId: id });
        }
      })
    }, () => {
      this.cp.pop();
    })
  }
}
