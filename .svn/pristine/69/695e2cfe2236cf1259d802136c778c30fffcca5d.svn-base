import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams, AlertController } from 'ionic-angular';
import { CommonProvider } from "../../providers/common/common";
import { clamp } from 'ionic-angular/util/util';
import { Validators, FormBuilder, FormGroup, FormControl } from '@angular/forms';


import {CityPickerService} from "../../providers/common/CityPickerService";

@IonicPage(
  {
    name: 'info-address',
    priority: 'off'
  }
)
@Component({
  selector: 'page-info-address',
  templateUrl: 'info-address.html',
})
export class InfoAddressPage {
  form: FormGroup;
  rules: any = {
    consignee: ['', [Validators.required]],
    mobile: ['', [Validators.required, Validators.pattern('^[1][3,4,5,7,8][0-9]{9}$')]],
    province: ['', [Validators.required]],
    city: ['', [Validators.required]],
    district: ['', [Validators.required]],
    address_type: ['', [Validators.required]],
    address: ['', [Validators.required]],
    zipcode: ['', [Validators.pattern('^\\d{6}$')]],
    cityName:[],
  };
  provinces = [];
  cities = [];
  areas = [];
  user_id = '';  //用户id
  pageForm: FormGroup = this.formBuilder.group(this.rules);


  cityData:any[] = [];
  cityName:string = '';

  constructor(public navCtrl: NavController,
              public alertCtrl: AlertController,
              public cityPickerSev: CityPickerService,
              public navParams: NavParams,
              public cp: CommonProvider,
              public formBuilder: FormBuilder) {
  }

  ionViewDidLoad() {
    this.getRegions();
    let item = this.navParams.data.item;
    if (item) {
      let { consignee, mobile, address, province, city, district } = item;
      this.pageForm.patchValue({
        consignee,
        mobile,
        address,
        province,
        city,
        district
      });
    }
    // this.initLocation();
  }

  initLocation() {
    this.cp.getData('region/list',{id:1}).then((t: any) => this.provinces = t);

    let { province, city } = this.pageForm.value;
    if (province) {
      this.getCities(province);
      this.getDistrict(city);
    }

  }

  getCities(province_id, bol = false) {
    //拼接url，访问接口
    this.cp.getData('region/list',{id:province_id}).then((t: any) => {
      //把接受的城市列表赋值到cities
      this.cities = t;
      if (bol) {
        this.pageForm.patchValue({ city: t[0].region_id });
        this.getDistrict(t[0].region_id, true);
      }
    })
  }
  getDistrict(city_id, bol = false) {
    this.cp.getData('region/list',{id:city_id}).then((t: any) => {
      this.areas = t;
      bol &&
        this.pageForm.patchValue({ district: t[0].region_id });
    })

  }

  onSubmit(t) {
    t = {
      ...t,
      email: '',
      tel: '',
      user_id: 84276,
      country: 1
    }
    if (this.navParams.data.item) {
      t = {
        ...t,
        address_id: this.navParams.data.item.address_id
      }
      // console.log(t);
      // return;
      this.cp.getData('?m=area&a=actEditConsignee', t
      ).then((data: any) => {
        console.log(data);
        if (data.status == 1) {
          // history.go(-2);
          this.cp.goback();
        }
      })
    } else {
      // console.log(t);
      // return;
      this.cp.getData('?m=area&a=actEditConsignee', t
      ).then((data: any) => {
        console.log(data);
        if (data.status == 1) {
          this.cp.goback();
        }

      })
    }
  }

  del() {
    let confirm = this.alertCtrl.create({
      title: '是否确认删除',
      buttons: [
        {
          text: '否'
        },
        {
          text: '是',
          handler: () => {
            let address_id = this.navParams.data.item;
            let user_id = 84276;
            let t = {
              address_id,
              user_id
            }
            this.cp.getData("?m=area&a=dropConsignee", t).then((t: any) => {
              if (t.status == 1) {
                this.cp.goback();
              }

            })
          }
        }
      ]
    });
    confirm.present();
  }

  /*-------------*/

  getRegions(){
    this.cp.getData('region/list',{id:1}).then((res:any)=>{
      if(res.code==0){
        res.data.map((province,i,arr)=>{
          // console.log(provinces,i,arr);
          arrayHandle(province);
          province.children.map((city)=>{
            arrayHandle(city);
            city.children.map(region=>{
              arrayHandle(region)
            })
          })
        });
        this.cityData = res.data;
        console.log(this.cityData);
        console.log(res.data);
      }else{
        console.log(res);
      }

      function arrayHandle(region){
        region.code = region.region_id;
        region.name = region.region_name;
        region.children = region.region;

      }
    })
  }

  cityChange(event){
    console.log('cityChange',event);
  }

  setCityPickerData(){
/*    this.cityPickerSev.getCitiesData()
      .then( (data:any) => {
        console.log(data);
        this.cp.getCache('cityPickerDefaultValue').then((res:any)=>{
          console.log(res);
          let {province,city_name,district_name} = res;
          let province_name;
          for(let i=0,l=data.length;i<l;i++){
            if(data[i].code==province){
              province_name = data[i].name;
              break;
            }
          }
          this.cityName = `${province_name}-${city_name}-${district_name}`;
        });
        console.log(this.cityName);
        console.log('cityData',data);
        this.cityData = data
      });*/
  }

}
